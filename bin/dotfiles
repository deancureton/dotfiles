#!/bin/zsh

BIN_NAME=$(basename "$0")
COMMAND_NAME=$1
SUB_COMMAND_NAME=$2

sub_help () {
    echo "Usage: $BIN_NAME <command>"
    echo
    echo "Commands:"
    echo "   help               This help message"
    echo "   edit               Open dotfiles in editor ($EDITOR)"
    echo "   clean              Clean up caches (brew, pip)"
    echo "   update             Update packages and pkg managers (OS, brew, npm, gem, pip)"
    echo "   macos              Apply macOS system defaults"
    echo "   dock               Apply OS X Dock settings"
    echo "   start              Start services"
}

sub_dock () {
    . "${DOTFILES_DIR}/macos/dock.zsh" && echo "Dock reloaded."
}

sub_edit () {
    # zsh -c "$VISUAL_GIT $DOTFILES_DIR"
    zsh -c "$EDITOR $DOTFILES_DIR"
}

sub_clean () {
    echo "$ brew cleanup"
    brew cleanup
    echo "$ pip cache purge"
    pip cache purge
}

sub_update () {
    echo "$ topgrade"
    topgrade
}

sub_macos () {
    for DEFAULTS_FILE in "${DOTFILES_DIR}"/macos/defaults*.zsh; do
        echo "Applying ${DEFAULTS_FILE}" && . "${DEFAULTS_FILE}"
    done
    echo "Done. Some changes may require a logout/restart to take effect."
}

sub_start() {
    echo "Starting sketchybar, skhd, yabai"
    echo "$ brew services start sketchybar"
    brew services start sketchybar
    echo "$ skhd --start-service"
    skhd --start-service
    echo "$ yabai --start-service"
    yabai --start-service
}

case $COMMAND_NAME in
    "" | "-h" | "--help")
        sub_help
        ;;
    *)
        shift
        sub_${COMMAND_NAME} $@
        if [ $? = 127 ]; then
            echo "'$COMMAND_NAME' is not a known command or has errors." >&2
            sub_help
            exit 1
        fi
        ;;
esac
